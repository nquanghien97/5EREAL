generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  USER
  ADMIN
  STAFF
}

model user {
  id          Int       @id @default(autoincrement())
  phoneNumber String    @unique
  fullName    String
  password    String
  role        USER_ROLE @default(USER)
  createdAt   DateTime  @default(now())

  news        news[]
  coordinates coordinates[]

  projects          projects[]
  images_review_bds images_review_bds[]
}

model coordinates {
  id        Int      @id @default(autoincrement())
  lat       Float
  lng       Float
  note      String?  @db.LongText
  userId    Int
  user      user     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images_review_bds images_review_bds[]
}

model news {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  summary   String
  thumbnail String
  isHotNews Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  author    user     @relation(fields: [authorId], references: [id])

  news_sections news_sections[]
}

model news_sections {
  id         Int      @id @default(autoincrement())
  newsId     Int
  imageUrl   String?
  content    String?  @db.LongText
  caption    String?
  orderIndex Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  news news @relation(fields: [newsId], references: [id])

  @@unique([newsId, orderIndex])
  @@index([newsId])
}

model projects {
  id                    Int      @id @default(autoincrement())
  name                  String
  description           String
  fullName              String
  slug                  String   @unique
  location              String
  totalArea             Int
  constructionRate      Float
  floorHeightMin        Int
  floorHeightMax        Int
  type                  String
  numberOfUnits         Int
  investor              String
  thumbnailUrl          String
  backgroundOverviewUrl String?
  authorId              Int
  author                user     @relation(fields: [authorId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Quan hệ tới các section chi tiết
  project_sections project_sections[]

  project_images project_images[]
}

enum SECTION_TYPE {
  TIEN_ICH
  THU_VIEN_HINH_ANH
  NORMAL
}

model project_sections {
  id          Int          @id @default(autoincrement())
  projectId   Int
  type        SECTION_TYPE
  title       String? // tiêu đề section: "Tổng quan dự án", "Tiện ích", ...
  description String?
  content     String?      @db.LongText // HTML/Markdown
  imageUrl    String? // nếu có 1 ảnh chính
  orderIndex  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  project        projects         @relation(fields: [projectId], references: [id])
  project_images project_images[]

  @@unique([projectId, orderIndex])
  @@index([projectId])
}

model project_images {
  id         Int          @id @default(autoincrement())
  projectId  Int
  type       SECTION_TYPE
  sectionId  Int? // có thể null nếu ảnh thuộc toàn project chứ không thuộc section nào
  imageUrl   String
  caption    String?
  orderIndex Int
  createdAt  DateTime     @default(now())

  project projects          @relation(fields: [projectId], references: [id])
  section project_sections? @relation(fields: [sectionId], references: [id])

  @@index([projectId])
  @@index([sectionId])
}

model images_review_bds {
  id            Int         @id @default(autoincrement())
  url           String
  userId        Int
  user          user        @relation(fields: [userId], references: [id])
  coordinatesId Int
  coordinates   coordinates @relation(fields: [coordinatesId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
