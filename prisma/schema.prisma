generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  USER
  ADMIN
  STAFF
}

model user {
  id          Int       @id @default(autoincrement())
  phoneNumber String    @unique
  fullName    String
  password    String
  role        USER_ROLE @default(USER)
  createdAt   DateTime  @default(now())

  news        news[]
  coordinates coordinates[]

  projects          projects[]
  images_review_bds images_review_bds[]
}

model coordinates {
  id        Int      @id @default(autoincrement())
  lat       Float
  lng       Float
  note      String?  @db.LongText
  userId    Int
  user      user     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images_review_bds images_review_bds[]
}

model news {
  id           Int      @id @default(autoincrement())
  title        String
  slug         String   @unique
  content      String   @db.LongText
  thumbnailUrl String
  createdAt    DateTime @default(now())
  authorId     Int
  author       user     @relation(fields: [authorId], references: [id])
}

model projects {
  id               Int      @id @default(autoincrement())
  name             String
  slug             String   @unique
  location         String
  totalArea        Int //Diện tích (m2)
  constructionRate Float // Mật độ xây dựng (%)
  floorHeightMin   Int // Số tầng thấp nhất
  floorHeightMax   Int // Số tầng cao nhất
  type             String // Loại hình bất động sản
  numberOfUnits    Int // Tổng số căn
  investor         String // Tên chủ đầu tư
  thumbnailUrl     String // URL ảnh đại diện
  content          String   @db.LongText // Nội dung mô tả chi tiết (HTML/Markdown)
  authorId         Int
  author           user     @relation(fields: [authorId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model images_review_bds {
  id            Int         @id @default(autoincrement())
  url           String
  userId        Int
  user          user        @relation(fields: [userId], references: [id])
  coordinatesId Int
  coordinates   coordinates @relation(fields: [coordinatesId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model job_category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  job job[]
}

enum JOB_TYPE {
  Full_time
  Part_time
  Intern
  Contract
  Freelancer
}

model job {
  id                    Int          @id @default(autoincrement())
  job_name              String
  location              String
  time_open             String
  time_close            String
  job_type              JOB_TYPE
  salary                String
  job_description       String       @db.LongText
  number_of_recruitment Int
  created_at            DateTime     @default(now())
  slug                  String       @unique(map: "Job_slug_key")
  categoryId            Int?
  category              job_category? @relation(fields: [categoryId], references: [id])
}
